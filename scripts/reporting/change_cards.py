#!/usr/bin/env python3
# KEYWORDS: change-—Ñ–∞–π–ª—ã, –æ–±–∑–æ—Ä, –∫–∞—Ä—Ç–æ—á–∫–∏, –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
# [ANCHOR:PROJECT:TGBOT:SCRIPTS:REPORTING:CHANGE-CARDS]
# <HARMONY:BEGIN name="PROJECT:TGBOT:SCRIPTS:REPORTING:CHANGE-CARDS:MODULE">
"""–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–∑–æ—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è change-—Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–≥—Ä–µ–≥–∞—Ü–∏–∏.

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—É –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫–∏–µ change-—Ñ–∞–π–ª—ã
–æ–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∏–∑ –∫–∞–∫–∏—Ö —Å–µ—Å—Å–∏–π –æ–Ω–∏ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –∏ –∫–∞–∫–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
–æ–Ω–∏ –Ω–µ—Å—É—Ç. –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ LLM-–∞–≥–µ–Ω—Ç–∞–º–∏.
"""
# <HARMONY:END name="PROJECT:TGBOT:SCRIPTS:REPORTING:CHANGE-CARDS:MODULE">

from __future__ import annotations

import argparse
import json
import re
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, Iterable, List, Optional, Tuple


@dataclass
class ChangeCard:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ change-—Ñ–∞–π–ª–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞."""

    scope: str
    path: Path
    session: Optional[str]
    headline: Optional[str]
    status_hint: Optional[str]

    def to_dict(self) -> Dict[str, Optional[str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""

        return {
            "scope": self.scope,
            "path": str(self.path),
            "session": self.session,
            "headline": self.headline,
            "status_hint": self.status_hint,
            "role": "LLM-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
        }


# <HARMONY:BEGIN name="PROJECT:TGBOT:SCRIPTS:REPORTING:CHANGE-CARDS:PARSERS">
CHANGE_DIRECTORIES: Tuple[Tuple[str, str], ...] = (
    ("human-friendly", "human-friendly/changes"),
    ("roadmap", "docs/ROADMAP/changes"),
    ("issues", "docs/ISSUES/changes"),
)

SESSION_RE = re.compile(r"S(\d{3,})")
STATUS_RE = re.compile(r"([‚úÖ‚ö†Ô∏èüö´üü°][^\n]*)")


def iter_change_files(root: Path) -> Iterable[Tuple[str, Path]]:
    """–ò—Ç–µ—Ä–∏—Ä—É–µ—Ç change-—Ñ–∞–π–ª—ã –≤–æ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö."""

    for scope, relative in CHANGE_DIRECTORIES:
        directory = root / relative
        if not directory.exists():
            continue
        for path in sorted(directory.glob("*.md")):
            yield scope, path


def extract_session(text: str) -> Optional[str]:
    """–í—ã–¥–µ–ª—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""

    match = SESSION_RE.search(text)
    if match:
        return f"S{match.group(1)}"
    return None


def extract_status_hint(text: str) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–π –æ—Ç–º–µ—Ç–∫–æ–π."""

    match = STATUS_RE.search(text)
    if match:
        return match.group(1).strip()
    return None


def extract_headline(text: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–ø–∏—Å–∫–∞."""

    for line in text.splitlines():
        stripped = line.strip()
        if stripped.startswith("-") and "[" not in stripped:
            return stripped.lstrip("- ")
    return None


def build_card(scope: str, path: Path) -> ChangeCard:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É."""

    text = path.read_text(encoding="utf-8")
    session = extract_session(text)
    status = extract_status_hint(text)
    headline = extract_headline(text)
    return ChangeCard(scope=scope, path=path, session=session, headline=headline, status_hint=status)


def collect_cards(root: Path) -> List[ChangeCard]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –≤—Å–µ–º –∫–∞—Ç–∞–ª–æ–≥–∞–º."""

    cards: List[ChangeCard] = []
    for scope, path in iter_change_files(root):
        cards.append(build_card(scope, path))
    return cards


# <HARMONY:END name="PROJECT:TGBOT:SCRIPTS:REPORTING:CHANGE-CARDS:PARSERS">

# <HARMONY:BEGIN name="PROJECT:TGBOT:SCRIPTS:REPORTING:CHANGE-CARDS:OUTPUT">
def render_markdown(cards: List[ChangeCard], limit: Optional[int]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Markdown-—Ç–∞–±–ª–∏—Ü—É –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º."""

    rows = []
    header = "| –û—á–µ—Ä–µ–¥—å | –°–µ—Å—Å–∏—è | –ü—É—Ç—å | –ö—Ä–∞—Ç–∫–æ | –°—Ç–∞—Ç—É—Å |\n"
    header += "|---------|--------|------|--------|--------|\n"
    iterable = cards[:limit] if limit else cards
    for card in iterable:
        rows.append(
            f"| {card.scope} | {card.session or '‚Äî'} | `{card.path}` | {card.headline or '‚Äî'} | "
            f"{card.status_hint or '–æ–∂–∏–¥–∞–µ—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏'} |"
        )
    return header + "\n".join(rows)


def render_json(cards: List[ChangeCard], limit: Optional[int]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç JSON."""

    iterable = cards[:limit] if limit else cards
    payload = [card.to_dict() for card in iterable]
    return json.dumps(payload, ensure_ascii=False, indent=2)


# <HARMONY:END name="PROJECT:TGBOT:SCRIPTS:REPORTING:CHANGE-CARDS:OUTPUT">

# <HARMONY:BEGIN name="PROJECT:TGBOT:SCRIPTS:REPORTING:CHANGE-CARDS:CLI">
def parse_args() -> argparse.Namespace:
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã."""

    parser = argparse.ArgumentParser(
        description="–°–æ–∑–¥–∞—ë—Ç –æ–±–∑–æ—Ä–Ω—É—é —Ç–∞–±–ª–∏—Ü—É change-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ (–≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è LLM-–∞–≥–µ–Ω—Ç–∞–º–∏)."
    )
    parser.add_argument("--format", choices=["markdown", "json"], default="markdown", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞.")
    parser.add_argument("--limit", type=int, default=None, help="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –≤—ã–≤–æ–¥–µ.")
    parser.add_argument(
        "--root",
        type=Path,
        default=Path(__file__).resolve().parents[2],
        help="–ö–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).",
    )
    return parser.parse_args()


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""

    args = parse_args()
    cards = collect_cards(args.root)
    if args.format == "markdown":
        output = render_markdown(cards, args.limit)
    else:
        output = render_json(cards, args.limit)
    print(output)


# <HARMONY:END name="PROJECT:TGBOT:SCRIPTS:REPORTING:CHANGE-CARDS:CLI">
if __name__ == "__main__":
    main()
